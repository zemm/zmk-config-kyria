/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEF 0
#define NAV 1
#define NUM 2
#define SYM 3
#define KPD 4
#define FUN 5
#define LMOD 6
#define RMOD 7

#define X_UNDO LC(Z)
#define X_REDO LC(LS(Z))
#define X_PASTE LC(V)
#define X_PASTA LC(LA(V))
#define X_COPY LC(C)
#define X_CUT LC(X)


// Modifiers for left/right side fingers: 4=little 3=ring 2=middle 1=index
#define LMO4 LGUI
#define LMO3 LALT
#define LMO2 LCTRL
#define LMO1 LSHFT

#define RMO1 RSHFT
#define RMO2 RCTRL
#define RMO3 LALT
#define RMO4 RGUI

#define KP_MULT KP_MULTIPLY
#define KP_DIV KP_DIVIDE

/ {
	behaviors {
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	| ??? | Q   | W   | E   | R   | T   |                             | Y   | U   | I   | O   | P   | -   |
//	| ??? | A   | S   | D   | F   | G   |                             | H   | J   | K   | L   | ;   | '   |
//	| ??? | Z   | X   | C   | V   | B   | ??? | ??? |     | ??? | ??? | N   | M   | ,   | .   | /   | \   |
//	                  | ??? | ??? | ??? | ??? | ??? |     | ??? | ??? | ??? | ??? | ??? |
			bindings = <
	&mt LALT ESC  &kp Q  &kp W  &kp E   &kp R    &kp T                                                         &kp Y    &kp U     &kp I     &kp O   &kp P    &mt RALT MINUS
	&kp BSPC      &kp A  &kp S  &kp D   &kp F    &kp G                                                         &kp H    &kp J     &kp K     &kp L   &kp SEMI &mt RSHFT SQT
	&mt LCTRL     &kp Z  &kp X  &kp C   &kp V    &kp B      &mo SYM   &mo KPD    &kp RCTRL      &kp RALT       &kp N    &kp M     &kp COMMA &kp DOT &kp FSLH &mt RCTRL BSLH
	                            &mo FUN &mo LMOD &kp LSHFT  &mo NAV   &mo NUM    &mt RCTRL RET  &mt RALT SPACE &mo RMOD &mo RMOD  &to NAV
			>;
		};

		navigation_layer {
			bindings = <
	&trans   &kp BSPC  &kp LS(TAB) &kp TAB   &none     &none                                    &kp INS   &kp PG_UP   &kp UP     &kp PG_DN  &kp TAB     &none
	&trans   &kp LMO4  &kp LMO3    &kp LMO2  &kp LMO1  &kp RALT                                 &kp BSPC  &kp LEFT    &kp DOWN   &kp RIGHT  &kp DEL     &none
	&trans   &sk LMO4  &sk LMO3    &sk LMO2  &sk LMO1  &sk RALT &trans &trans    &trans &to DEF &kp K_CUT &kp HOME    &kp K_COPY &kp END    &kp X_PASTA &none
	                               &trans    &trans    &trans   &trans &trans    &trans &trans  &trans    &trans      &trans
			>;
		};

		number_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	| `   |     | (   | )   |     |     |                             | ^   | 7   | 8   | 9   | -   | /   |
//	|     | XXX | XXX | XXX | XXX |     |                             | `   | 4   | 5   | 6   | +   | *   |
//	| ~   | [   | {   | }   | ]   |     | --- | --- |     | --- | --- | _   | 1   | 2   | 3   | =   | RET |
//	                  | --- | --- | --- | --- | --- |     | --- | --- | 0   | --- | --- |
			bindings = <
	&trans  &kp BSPC  &kp LPAR  &kp RPAR  &none     &none                                    &kp CARET &kp N7  &kp N8  &kp N9  &kp MINUS &kp FSLH
	&trans  &kp LMO4  &kp LMO3  &kp LMO2  &kp LMO1  &none                                    &kp GRAVE &kp N4  &kp N5  &kp N6  &kp PLUS  &kp STAR
	&trans  &kp LBKT  &kp RBRC  &kp RBRC  &kp RBKT  &none    &trans &trans    &trans &to DEF &kp UNDER &kp N1  &kp N2  &kp N3  &kp EQUAL &kp RET
	                            &trans    &trans    &trans   &trans &trans    &trans &trans  &kp N0    &trans  &trans
			>;
		};

		symbol_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	|     |     | (   | )   |     |     |                             | (   | &   | *   | +   | )   | ~   |
//	|     | XXX | XXX | XXX | XXX |     |                             | {   | $   | %   | ^   | }   |     |
//	|     | [   | {   | }   | ]   |     | --- | --- |     | --- | --- | [   | !   | @   | #   | ]   |     |
//	                  | --- | --- | --- | --- | --- |     | --- | --- | --- | --- | --- |
			bindings = <
	&trans  &kp BSPC  &kp LPAR  &kp RPAR  &none     &kp PRCNT                                 &kp LPAR   &kp AMPS  &kp STAR  &kp TILDE &kp RPAR  &kp TILDE
	&trans  &kp LMO4  &kp LMO3  &kp LMO2  &kp LMO1  &none                                     &kp LBRC   &kp DLLR  &kp PRCNT &kp CARET &kp RBRC  &trans
	&trans  &kp LBKT  &kp RBRC  &kp RBRC  &kp RBKT  &none     &trans &trans    &trans &to DEF &kp LBKT   &kp EXCL  &kp AT    &kp HASH  &kp RBKT  &trans
	                            &trans    &trans    &trans    &trans &trans    &trans &trans  &trans     &trans         &trans
			>;
		};

		keypad_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	|     |     | (   | )   | =   |     |                             | NML | 7   | 8   | 9   | ^   | KP= |
//	|     | XXX | XXX | XXX | XXX |     |                             | *   | 4   | 5   | 6   | +   | #   |
//	|     | [   | {   | }   | ]   |     | --- | --- |     | --- | --- | /   | 1   | 2   | 3   | -   | %   |
//	                  | --- | --- | --- | --- | --- |     | --- | 0   | KP, | RET | CAL |
			bindings = <
	&trans  &kp BSPC  &kp LPAR  &kp RPAR  &kp EQUAL &none                                          &kp KP_NLCK  &kp KP_N7    &kp KP_N8 &kp KP_N9 &kp CARET    &kp C_AL_CALCULATOR
	&trans  &kp LMO4  &kp LMO3  &kp LMO2  &kp LMO1  &none                                          &kp KP_MULT  &kp KP_N4    &kp KP_N5 &kp KP_N6 &kp KP_PLUS  &kp HASH
	&trans  &kp LBKT  &kp LBRC  &kp RBRC  &kp RBKT  &none   &trans &trans    &trans       &to DEF  &kp KP_DIV   &kp KP_N1    &kp KP_N2 &kp KP_N3 &kp KP_MINUS &kp PRCNT
	                            &trans    &trans    &trans  &trans &trans    &kp KP_ENTER &trans   &kp KP_N0    &kp KP_COMMA &kp KP_EQUAL
			>;
		};

		function_layer {
			bindings = <
	&bt BT_SEL 0 &kp C_MUTE   &kp C_VOL_UP &kp C_VOL_DN &kp C_PREV &kp C_NEXT                                     &kp F12 &kp F7 &kp F8 &kp F9 &rgb_ug RGB_EFF &rgb_ug RGB_TOG
	&bt BT_SEL 1 &kp LMO4     &kp LMO3     &kp LMO2     &kp LMO1   &kp C_STOP                                     &kp F11 &kp F4 &kp F5 &kp F6 &rgb_ug RGB_HUI &rgb_ug RGB_BRI
	&bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp PSCRN    &kp INS    &out OUT_TOG &trans &bt BT_CLR  &trans &to DEF &kp F10 &kp F1 &kp F2 &kp F3 &rgb_ug RGB_HUD &rgb_ug RGB_BRD
	                                       &trans       &trans     &trans       &trans &kp CAPS    &trans &trans  &trans  &trans &trans
			>;
		};

		left_modifier_layer {
			bindings = <
	&trans  &trans    &trans    &kp LS(TAB) &kp TAB   &trans                                     &trans  &trans  &trans  &trans  &trans  &trans
	&trans  &kp LMO4  &kp LMO3  &kp LMO2    &kp LMO1  &trans                                     &trans  &trans  &trans  &trans  &trans  &trans
	&trans  &sk LMO4  &sk LMO3  &sk LMO2    &sk LMO1  &trans  &trans  &trans    &trans  &to DEF  &trans  &trans  &trans  &trans  &trans  &trans
	                            &trans      &trans    &trans  &trans  &trans    &trans  &trans   &trans  &trans  &trans
			>;
		};

		right_modifier_layer {
			bindings = <
	&trans  &trans  &trans  &trans  &trans  &trans                                     &trans  &trans    &trans    &trans    &trans    &trans
	&trans  &trans  &trans  &trans  &trans  &trans                                     &trans  &kp RMO4  &kp RMO3  &kp RMO2  &kp RMO1  &trans
	&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &to DEF  &trans  &sk RMO4  &sk RMO3  &sk RMO2  &sk RMO1  &trans
	                        &trans  &trans  &trans  &trans  &trans    &trans  &trans   &trans  &trans    &trans
			>;
		};
	};
};
