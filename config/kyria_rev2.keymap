/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEF 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUN 4
#define KPD 5

#define X_UNDO LC(Z)
#define X_REDO LC(LS(Z))
#define X_PASTE LC(V)
#define X_PASTA LC(LA(V))
#define X_COPY LC(C)
#define X_CUT LC(X)


// Modifiers for left/right side fingers: 4=little 3=ring 2=middle 1=index
#define LMO4 LGUI
#define LMO3 LALT
#define LMO2 LSHFT
#define LMO1 LCTRL

#define RMO1 RCTRL
#define RMO2 RSHFT
#define RMO3 LALT
#define RMO4 RGUI

#define KP_MULT KP_MULTIPLY
#define KP_DIV KP_DIVIDE

#define COMBO_ALL(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <30>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  }

#define COMBO_L0(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <30>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  }

/ {
	behaviors {
	};

//	---------------------------------------------------------------------------------------------------------------------------------
//	| 0   | 1   | 2   | 3   | 4   | 5   |                             | 6   | 7   | 8   | 9   | 10  | 11  |
//	| 12  | 13  | 14  | 15  | 16  | 17  |                             | 18  | 19  | 20  | 21  | 22  | 23  |
//	| 24  | 25  | 26  | 27  | 28  | 29  | 30  | 31  |     | 32  | 33  | 34  | 35  | 36  | 37  | 38  | 39  |
//	                  | 40  | 41  | 42  | 43  | 44  |     | 45  | 46  | 47  | 48  | 49  

	combos {
		compatible = "zmk,combos";

		COMBO_ALL(esc, &kp ESC, 1 2);
		COMBO_ALL(tab, &kp TAB, 9 10);
		COMBO_ALL(enter, &kp ENTER, 21 22);
		COMBO_ALL(bspc, &kp BSPC, 13 14);

		COMBO_L0(rctrl, &kp RCTRL, 35 36);
		COMBO_L0(rlalt, &kp LALT, 35 37);
		COMBO_L0(rgui, &kp RGUI, 35 38);
		COMBO_L0(lctrl, &kp LCTRL, 27 28);
		COMBO_L0(lalt, &kp LALT, 26 28);
		COMBO_L0(lgui, &kp LGUI, 25 28);
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	| ??? | Q   | W   | E   | R   | T   |                             | Y   | U   | I   | O   | P   | -   |
//	| ??? | A   | S   | D   | F   | G   |                             | H   | J   | K   | L   | ;   | '   |
//	| ??? | Z   | X   | C   | V   | B   | ??? | ??? |     | ??? | ??? | N   | M   | ,   | .   | /   | \   |
//	                  | ??? | ??? | ??? | ??? | ??? |     | ??? | ??? | ??? | ??? | ??? |
			bindings = <
	&mt LALT ESC  &kp Q  &kp W  &kp E   &kp R    &kp T                                                  &kp Y    &kp U     &kp I     &kp O   &kp P    &kp MINUS
	&kp BSPC      &kp A  &kp S  &kp D   &kp F    &kp G                                                  &kp H    &kp J     &kp K     &kp L   &kp SEMI &kp SQT
	&kp LCTRL     &kp Z  &kp X  &kp C   &kp V    &kp B      &kp LCTRL &mo SYM    &to KPD     &none      &kp N    &kp M     &kp COMMA &kp DOT &kp FSLH &kp BSLH
	                            &mo FUN &none    &kp LSHFT  &mo NAV   &mo NUM    &lt SYM RET &kp SPACE  &kp RALT &none     &none
			>;
		};

		navigation_layer {
			bindings = <
	&trans   &kp BSPC  &kp TAB   &kp LS(TAB) &kp TAB   &none                                    &kp INS   &kp PG_UP   &kp UP     &kp PG_DN  &kp TAB     &none
	&trans   &kp LMO4  &kp LMO3  &kp LMO2    &kp LMO1  &none                                    &kp BSPC  &kp LEFT    &kp DOWN   &kp RIGHT  &kp ENTER   &none
	&trans   &sk LMO4  &sk LMO3  &sk LMO2    &sk LMO1  &none    &trans &trans    &trans &to DEF &kp K_CUT &kp HOME    &kp K_COPY &kp END    &kp X_PASTA &none
	                             &trans      &trans    &trans   &trans &trans    &trans &trans  &trans    &trans      &trans
			>;
		};

		number_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	|     |     | (   | )   | =   |     |                             | *   | 7   | 8   | 9   | -   |     |
//	|     | XXX | XXX | XXX | XXX |     |                             | .   | 4   | 5   | 6   | +   |     |
//	|     | [   | {   | }   | ]   |     | --- | --- |     | --- | --- | ,   | 1   | 2   | 3   | /   |     |
//	                  | --- | --- | --- | --- | --- |     | --- | --- | 0   | --- | --- |
			bindings = <
	&trans  &kp BSPC  &kp LPAR  &kp RPAR  &kp EQUAL &none                                    &kp STAR  &kp N7  &kp N8  &kp N9  &kp MINUS &none
	&trans  &kp LMO4  &kp LMO3  &kp LMO2  &kp LMO1  &none                                    &kp DOT   &kp N4  &kp N5  &kp N6  &kp PLUS  &none
	&trans  &kp LBKT  &kp RBRC  &kp RBRC  &kp RBKT  &none    &trans &trans    &trans &to DEF &kp COMMA &kp N1  &kp N2  &kp N3  &kp FSLH  &none
	                            &trans    &trans    &trans   &trans &trans    &trans &trans  &kp N0    &trans  &trans
			>;
		};

		symbol_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	|     |     | (   | )   |     |     |                             | (   | &   | *   | +   | )   | _   |
//	|     | XXX | XXX | XXX | XXX |     |                             | {   | $   | %   | ^   | }   | `   |
//	|     | [   | {   | }   | ]   |     | --- | --- |     | --- | --- | [   | !   | @   | #   | ]   | ~   |
//	                  | --- | --- | --- | --- | --- |     | --- | --- | --- | --- | --- |
			bindings = <
	&trans  &kp BSPC  &kp LPAR  &kp RPAR  &none     &none                                     &kp LPAR   &kp AMPS  &kp STAR  &kp TILDE &kp RPAR  &kp UNDER
	&trans  &kp LMO4  &kp LMO3  &kp LMO2  &kp LMO1  &none                                     &kp LBRC   &kp DLLR  &kp PRCNT &kp CARET &kp RBRC  &kp GRAVE
	&trans  &kp LBKT  &kp RBRC  &kp RBRC  &kp RBKT  &none     &trans &trans    &trans &to DEF &kp LBKT   &kp EXCL  &kp AT    &kp HASH  &kp RBKT  &kp TILDE
	                            &trans    &trans    &trans    &trans &trans    &trans &trans  &trans     &trans         &trans
			>;
		};

		function_layer {
			bindings = <
	&bt BT_SEL 0 &kp C_MUTE   &kp C_VOL_UP &kp C_VOL_DN &kp C_PREV &kp C_NEXT                                     &kp F12 &kp F7 &kp F8 &kp F9 &rgb_ug RGB_EFF &rgb_ug RGB_TOG
	&bt BT_SEL 1 &kp LMO4     &kp LMO3     &kp LMO2     &kp LMO1   &kp C_PLAY_PAUSE                               &kp F11 &kp F4 &kp F5 &kp F6 &rgb_ug RGB_HUI &rgb_ug RGB_BRI
	&bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp PSCRN    &kp INS    &out OUT_TOG &trans &bt BT_CLR  &trans &to DEF &kp F10 &kp F1 &kp F2 &kp F3 &rgb_ug RGB_HUD &rgb_ug RGB_BRD
	                                       &trans       &trans     &trans       &trans &kp CAPS    &trans &trans  &trans  &trans &trans
			>;
		};

//
// May delete these
//

		keypad_layer {
//	---------------------------------------------------------------------------------------------------------------------------------
//	|     |     | (   | )   | =   |     |                             | NML | 7   | 8   | 9   | ^   | KP= |
//	|     | XXX | XXX | XXX | XXX |     |                             | *   | 4   | 5   | 6   | +   | #   |
//	|     | [   | {   | }   | ]   |     | --- | --- |     | --- | --- | /   | 1   | 2   | 3   | -   | %   |
//	                  | --- | --- | --- | --- | --- |     | --- | 0   | KP, | RET | CAL |
			bindings = <
	&trans  &kp BSPC  &kp LPAR  &kp RPAR  &kp EQUAL &none                                          &kp KP_NLCK  &kp KP_N7    &kp KP_N8 &kp KP_N9 &kp CARET    &kp C_AL_CALCULATOR
	&trans  &kp LMO4  &kp LMO3  &kp LMO2  &kp LMO1  &none                                          &kp KP_MULT  &kp KP_N4    &kp KP_N5 &kp KP_N6 &kp KP_PLUS  &kp HASH
	&trans  &kp LBKT  &kp LBRC  &kp RBRC  &kp RBKT  &none   &trans &trans    &trans       &to DEF  &kp KP_DIV   &kp KP_N1    &kp KP_N2 &kp KP_N3 &kp KP_MINUS &kp PRCNT
	                            &trans    &trans    &trans  &trans &trans    &kp KP_ENTER &trans   &kp KP_N0    &kp KP_COMMA &kp KP_EQUAL
			>;
		};
	};
};
